# Creator: Davy (Dawei) Chen
# Time: October 5th, 2024
# Email: cndv3996@163.com
# Profile: https://www.linkedin.com/in/davychxn/

# Notice: The following code works with 16-bit WAV only
#         To work with 24-bit WAV, some tweaks might be needed

import os
import glob
import json
import struct
import wave

CONFIG_PATH = "."
CONFIG_FILENAME = "script_configs.json"
# The average value to be filtered from heading and trailing of the WAV sequence
lowest_value = 160
# The strip to get an average
sample_count = 5

config_file = CONFIG_PATH + "/" + CONFIG_FILENAME
json_str = ""

# Read config file to get paths of WAVs to be processed
with open(config_file, 'r', encoding="utf-8") as file:
    json_str = file.read()

json_obj = json.loads(json_str)

input_wav_path = json_obj["input_path"]
output_wav_path = json_obj["output_path"]

if json_obj["lowest_value"] is not None:
    lowest_value = json_obj["lowest_value"]
    
if json_obj["sample_count"] is not None:
    sample_count = json_obj["sample_count"]

# Collect WAVs list
input_path = input_wav_path + "/" + "*.wav"
files = glob.glob(input_path)

file_index = 0
# Trim leading and trailing zero values
for file in files:
    frames = []
    with wave.open(file, 'rb') as w:
        # Convert WAV frames from byte array to short int array
        for index in range(w.getnframes()):
            frame = w.readframes(1)
            if len(frame) != 2:
                continue
            data = struct.unpack("<h", frame)

            frames.append(data[0])

        sub_start = 0
        sub_end = len(frames)

        # Trim heading silent frames
        for i in range(len(frames) - sample_count):
            average = abs(frames[i])
            sumval = 0
            for k in range(sample_count):
                sumval += abs(frames[i + k])
            
            average = sumval // sample_count
                
            if average < lowest_value:
                continue
            else:
                sub_start = i
                break

        # Trim trailing silent frames
        for i in range(len(frames) - sample_count):
            j = len(frames) - i - 1
            
            average = abs(frames[j])
            sumval = 0
            for k in range(sample_count):
                sumval += abs(frames[j - k])
            
            average = sumval // sample_count
            
            if average < lowest_value:
                continue
            else:
                sub_end = j
                break
        
        minval = 0
        maxval = 0
        
        frames = frames[sub_start:sub_end]
        cooked = []
        # Convert short int array back to byte array for saving
        for frame in frames:
            minval = min(minval, frame)
            maxval = max(maxval, frame)
            cooked.append(struct.pack('<h', frame))

        params = w.getparams()
        wav_name = os.path.basename(file)
        save_path = output_wav_path + "/" + wav_name

        with wave.open(save_path, 'wb') as w2:
            w2.setparams(params)
            w2.writeframes(b''.join(cooked))
        
        file_index += 1
        print("{}/{} WAVs trimmed.".format(file_index, len(files)))
